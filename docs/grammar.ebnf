ws = "U+32";
nl = "U+0A";
colon = ":"; 
comma = ","; 

  (* Program *)

program 
  = program_header, program_separator, [program_instructions];

  (* program_header *)

program_header 
  = (const_decls, var_decls)
  | (var_decls, const_decls); 

(* constant declarations *)

kw_const_decl = "CONSTANTES" 
const_decls 
  = kw_const_decl, colon, nl, [type_declaration];

(* variable declarations *)

kw_var_decl = "VARIABLES" 
const_decls 
  = kw_var_decl, colon, nl, [type_declaration];

(* type declarations *)

kw_type = "TYPE" ;
data_type
  = "booléen"
  | "chaine"
  | "entier"
  | "réel";

type_declaration
  = kw_type, ws, data_type, [ws], colon, {(identifier_declaration, comma)};

identifier_declaration
  = identifier, "=", value; 

identifier
  = letter, {symbol}; 

letter
  = ? matches /[a-z]/gi ?;

symbol
  = ? matches /[^\s]+/g ?;

value
  = string 
  | number 
  | boolean

(* data types *)

string 
  = '"', string_sequence, '"';
string_sequence = ? matches /((\\\"|[^\"])+?)/g ?;

boolean 
  = "VRAI" 
  | "FAUX"; 

number = 
  digits | (digits, "," digits); 

digits = digit, [digit]; 
digits 
  = "0"
  | "1
  | "2"
  | "3"
  | "4"
  | "5"
  | "6"
  | "7"
  | "8"
  | "9"; 

(* program separator *)
program_separator 
  = 5 * "_", {"_"};

(* program instructions *)

program_instructions 
  = {expr};

expr 
  = if_expr; 

(* general keywords *)

expr_end = "FIN"; 

(* conditionnals *)

kw_if = "SI";
kw_else = "SINON"; 
kw_then = "ALORS";

if_expr 
  = if_head, 
    if_body, 
    { if_else_head, if_body },
    { kw_else, nl, if_body }, 
    ( kw_if, ws, expr_end );

if_head
  = kw_if, ws, cond_expr, ws, kw_then, nl;

if_body
  = (stmt)+; 

if_else_head
  = kw_else, ws, kw_if, cond_expr, kw_then, nl;

